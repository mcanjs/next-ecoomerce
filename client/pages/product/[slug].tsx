import { IProducts, IProductsItem } from '@/interfaces/Products';
import fetchJson from '@/utils/fetchJson';
import { abb, calcDiscountPrice } from '@/utils/helpers';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { MutableRefObject, useRef, useState } from 'react';
import { AiFillStar, AiOutlineHeart } from 'react-icons/ai';
import { HiOutlineShoppingBag } from 'react-icons/hi2';
import {
  RiFacebookCircleFill,
  RiInstagramFill,
  RiTwitterFill
} from 'react-icons/ri';
import NumericInput from 'react-numeric-input';
import {
  useKeenSlider,
  KeenSliderPlugin,
  KeenSliderInstance
} from 'keen-slider/react';
import 'keen-slider/keen-slider.min.css';
import { IReviews } from '@/interfaces/Reviews';
import { format } from 'date-fns';
import {
  CheckboxAttributes,
  InputAttributes,
  RadioAttributes,
  SelectAttributes,
  TextareaAttributes
} from '@/components/attribute';
import { IAttributeItem } from '@/interfaces/Attribute';

interface IProps {
  product: {
    data: IProductsItem;
    message: string;
  };
  reviews: IReviews;
}

function ThumbnailPlugin(
  mainRef: MutableRefObject<KeenSliderInstance | null>
): KeenSliderPlugin {
  return (slider: any) => {
    function removeActive() {
      slider.slides.forEach((slide: any) => {
        slide.classList.remove('active');
      });
    }
    function addActive(idx: number) {
      slider.slides[idx].classList.add('active');
    }

    function addClickEvents() {
      slider.slides.forEach((slide: any, idx: any) => {
        slide.addEventListener('click', () => {
          if (mainRef.current) mainRef.current.moveToIdx(idx);
        });
      });
    }

    slider.on('created', () => {
      if (!mainRef.current) return;
      addActive(slider.track.details.rel);
      addClickEvents();
      mainRef.current.on('animationStarted', (main: any) => {
        removeActive();
        const next = main.animator.targetIdx || 0;
        addActive(main.track.absToRel(next));
        slider.moveToIdx(Math.min(slider.track.details.maxIdx, next));
      });
    });
  };
}

export default function Product(props: IProps) {
  const [quantity, setQuantity] = useState<number>(1);
  const [sliderRef, instanceRef] = useKeenSlider<HTMLDivElement>({
    initial: 0
  });
  const [thumbnailRef] = useKeenSlider<HTMLDivElement>(
    {
      initial: 0,
      slides: {
        perView: 4,
        spacing: 10
      }
    },
    [ThumbnailPlugin(instanceRef)]
  );

  return (
    <>
      <Head>
        <title>{`Matter - ${props.product.data.title}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container grid grid-cols-12 gap-6 my-10">
        <div className="col-span-12 md:col-span-6">
          <div ref={sliderRef} className="keen-slider">
            {props.product.data.images.map((image, index) => (
              <div
                key={index}
                className={`keen-slider__slide number-slide${index}`}
              >
                <Image
                  src={image}
                  width={350}
                  height={250}
                  alt="product"
                  className="w-full h-[400px]"
                />
              </div>
            ))}
          </div>
          <div className="mt-4 overflow-hidden">
            <div ref={thumbnailRef} className="keen-slider thumbnail">
              {props.product.data.images.map((image, index) => (
                <div
                  key={index}
                  className={`keen-slider__slide number-slide${index}`}
                >
                  <Image
                    src={image}
                    width={350}
                    height={250}
                    alt="product2"
                    className="w-[full] h-[100px] cursor-pointer border"
                  />
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="col-span-12 md:col-span-6">
          <h2 className="text-3xl font-medium uppercase mb-2">
            {props.product.data.title}
          </h2>
          <div className="flex items-center mb-4">
            <div className="flex gap-1 text-sm">
              {[0, 1, 2, 3, 4].map((star, index) => (
                <div key={index}>
                  <AiFillStar
                    className={`${
                      props.product.data.rating > index && 'fill-yellow-400'
                    }`}
                  />
                </div>
              ))}
            </div>
            <div className="text-xs text-gray-500 ml-3">
              ({props.product.data.reviews.length} Reviews)
            </div>
          </div>
          <div className="space-y-2">
            <p className="text-gray-800 font-semibold space-x-2">
              <span>Availability: </span>
              {props.product.data.stock > 0 ? (
                <span className="text-green-600">In Stock</span>
              ) : (
                <span className="text-red-600">Out of Stock</span>
              )}
            </p>
            <p className="space-x-2">
              <span className="text-gray-800 font-semibold">
                Manufacturer:{' '}
              </span>
              <span className="text-gray-600">
                {typeof props.product.data.manufacturer === 'object' &&
                  props.product.data.manufacturer.name}
              </span>
            </p>
            <p className="space-x-2">
              <span className="text-gray-800 font-semibold">SKU: </span>
              <span className="text-gray-600">{props.product.data.sku}</span>
            </p>
          </div>
          {props.product.data.discountPercentage > 0 ? (
            <>
              <div className="flex items-baseline mb-1 space-x-2 font-roboto mt-4">
                <p className="text-xl text-primary font-semibold">
                  $
                  {calcDiscountPrice(
                    props.product.data.price,
                    props.product.data.discountPercentage
                  )}
                </p>
                <p className="text-base text-gray-400 line-through">
                  ${props.product.data.price}
                </p>
              </div>
            </>
          ) : (
            <>
              <p className="text-xl text-primary font-semibold">
                ${props.product.data.price}
              </p>
            </>
          )}

          <p className="mt-4 text-gray-600">{props.product.data.description}</p>
          {props.product.data.attributes.length > 0 &&
            props.product.data.attributes.map((attribute: IAttributeItem) => (
              <div key={attribute._id}>
                {attribute.type === 'radio' && (
                  <RadioAttributes {...attribute} />
                )}
                {attribute.type === 'checkbox' && (
                  <CheckboxAttributes {...attribute} />
                )}
                {attribute.type === 'select' && (
                  <SelectAttributes {...attribute} />
                )}
                {attribute.type === 'input' && (
                  <InputAttributes {...attribute} />
                )}
                {attribute.type === 'textarea' && (
                  <TextareaAttributes {...attribute} />
                )}
              </div>
            ))}

          {props.product.data.stock > 0 && (
            <div className="mt-4">
              <h3 className="text-sm text-gray-800 uppercase mb-1">Quantity</h3>
              <div className="flex border border-gray-300 text-gray-600 divide-x divide-gray-300 w-max">
                <button
                  type="button"
                  onClick={() =>
                    setQuantity(old => (old > 1 ? (old -= 1) : old))
                  }
                  className="h-8 w-8 text-xl flex items-center justify-center cursor-pointer select-none"
                >
                  -
                </button>

                <NumericInput
                  className="h-8 w-8 text-base text-center outline-none"
                  min={1}
                  max={props.product.data.stock}
                  value={quantity}
                  onChange={val =>
                    (val !== null && val > 0 && setQuantity(val)) ||
                    (val !== null &&
                      val > props.product.data.stock &&
                      setQuantity(props.product.data.stock))
                  }
                  noStyle
                />
                <button
                  type="button"
                  onClick={() =>
                    setQuantity(old =>
                      old < props.product.data.stock ? (old += 1) : old
                    )
                  }
                  className="h-8 w-8 text-xl flex items-center justify-center cursor-pointer select-none"
                >
                  +
                </button>
              </div>
            </div>
          )}
          <div className="flex flex-col items-center gap-3 mt-6 border-b border-gray-200 pb-5 pt-5 md:flex-row">
            {props.product.data.stock > 0 && (
              <button className="w-full bg-primary border border-primary text-white px-5 py-2 font-medium rounded uppercase flex justify-center items-center gap-2 hover:bg-transparent hover:text-primary transition">
                <HiOutlineShoppingBag size={20} />
                <span className="text-sm">Add to cart</span>
              </button>
            )}
            <button className="w-full border border-gray-300 text-gray-600 px-5 py-2 font-medium rounded uppercase flex justify-center items-center gap-2 hover:text-primary transition">
              <AiOutlineHeart size={20} /> Wishlist
            </button>
          </div>
          <div className="flex gap-3 mt-4">
            <a
              href="#"
              className="text-gray-400 hover:text-gray-500 h-8 w-8 rounded-full border border-gray-300 flex items-center justify-center"
            >
              <RiFacebookCircleFill />
            </a>
            <a
              href="#"
              className="text-gray-400 hover:text-gray-500 h-8 w-8 rounded-full border border-gray-300 flex items-center justify-center"
            >
              <RiTwitterFill />
            </a>
            <a
              href="#"
              className="text-gray-400 hover:text-gray-500 h-8 w-8 rounded-full border border-gray-300 flex items-center justify-center"
            >
              <RiInstagramFill />
            </a>
          </div>
        </div>
      </div>
      <div className="container grid grid-cols-12 items-start gap-6 pt-4 pb-16">
        <h3 className="col-span-12 border-b border-gray-200 font-roboto text-gray-800 pb-3 font-medium">
          Reviews
        </h3>
        {/* <div className="col-span-12">
          <div className="flex items-center gap-4 mb-5">
            <span>Rating :</span>
            <div className="rating">
              <input
                type="radio"
                name="rating-9"
                className="mask mask-star-2 bg-yellow-400"
              />
              <input
                type="radio"
                name="rating-9"
                className="mask mask-star-2 bg-yellow-400"
                defaultChecked
              />
              <input
                type="radio"
                name="rating-9"
                className="mask mask-star-2 bg-yellow-400"
              />
              <input
                type="radio"
                name="rating-9"
                className="mask mask-star-2 bg-yellow-400"
              />
              <input
                type="radio"
                name="rating-9"
                className="mask mask-star-2 bg-yellow-400"
              />
            </div>
          </div>
          <div className="flex flex-col">
            <textarea
              className="textarea w-full border focus:outline-none border-primary resize-none"
              placeholder="Review"
            ></textarea>
          </div>
          <div>
            <button className="mt-2 bg-primary border border-primary text-white px-5 py-2 font-medium rounded uppercase flex justify-center items-center gap-2 hover:bg-transparent hover:text-primary transition">
              Share
            </button>
          </div>
        </div> */}
        {props.reviews.data.length > 0 &&
          props.reviews.data.map(review => (
            <div className="col-span-12" key={review._id}>
              <div className="flex flex-col gap-4 md:flex-row">
                <div className="avatar placeholder hidden md:block">
                  <div className="bg-primary text-neutral-content rounded-full w-16 h-16">
                    <span className="text-xl text-white">
                      {abb(review.userId.name) + abb(review.userId.surname)}
                    </span>
                  </div>
                </div>
                <div className="flex flex-col">
                  <div className="flex flex-col items-center gap-2 mb-2 md:flex-row">
                    <div className="flex gap-1">
                      {[0, 1, 2, 3, 4].map(index => (
                        <AiFillStar
                          key={index}
                          className={`${
                            review.rating > index && 'fill-yellow-400'
                          }`}
                        />
                      ))}
                    </div>
                    <div className="flex gap-1">
                      <span>
                        {format(new Date(review.updatedAt), 'dd.MM.yyyy')}
                      </span>
                      <span>|</span>
                      <span>
                        {review.userId.name} {review.userId.surname}
                      </span>
                    </div>
                  </div>
                  <div className="w-full p-5 rounded-[8px] bg-gray-200">
                    <p className="text-[12px]">{review.description}</p>
                  </div>
                </div>
              </div>
            </div>
          ))}
      </div>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const slug = context.params?.slug;

  const product = await fetchJson(
    `${process.env.API_BASE_URL}/api/products/${slug}`,
    { method: 'GET' }
  )
    .then(response => response)
    .catch(() => []);

  const reviews: IReviews = await fetchJson(
    `${process.env.API_BASE_URL}/api/reviews/${product.data._id}`
  )
    .then(response => response)
    .catch(() => []);

  return {
    props: {
      product,
      reviews
    }
  };
}
